-- Resolver con SENTENCIAS AWAIT ( <> y <await B; S > ) el siguiente problema. En un negocio hay un empleado que debe atender a C clientes de acuerdo al orden de llegada. Al terminar la atención de un cliente el empleado debe entregarle un número aleatorio para un sorteo. Después de ser atendido el cliente debe imprimir el número que le entregó el empleado. Nota: maximizar la concurrencia.

int siguiente = -1; int num; bool ok;
cola c;

process Cliente [id:0..C-1]
{
  int n;
  <push(c,id)>
  <await siguiente == id;>
  -- Lo atienden
  <await ok>
  n = num;
  <ok = false>
  Imprimir(n);
}

process Empleado
{
  int atendidos = 0; int id;
  while (atendidos < C) {
    <await not empty(c); pop(c,id)>
    <siguiente = id>
    -- Atiende al cliente
    <num = GenerarAleatorio(); ok = true>
    atendidos++;
    <await not ok>
  }
}

-- Resolver con SEMAFOROS el siguiente problema. En el examen de una materia hay un docente y 50 alumnos. Cuando todos los alumnos han llegado comienza el examen. A medida que los alumnos van terminando le entregan el examen al docente, y esperan a que este le devuelva la nota del examen. El docente debe corregir los exámenes de acuerdo al orden en que los alumnos entregaron. Nota: maximizar la concurrencia.

sem mutex = 1, barrera = 0, docente = 0, alumnos[50] = ([50] 0);
int llegaron = 0; int notas[50];

process Alumno [id:0..49]
{
  p(mutex);
  llegaron++;
  if (llegaron == 50) v(docente);
  v(mutex);
  p(barrera)

  eval examen = -- Hago el examen

  p(mutex);
  push(c, (id,examen));
  v(mutex);

  p(alumnos[id]);
  int nota = notas[id];
}

process Docente
{
  p(docente);
  for i=1..50 -> v(barrera);

  int id; eval examen;

  for i=1..50 -> {
    p(docente);
    p(mutex_c);
    pop(c,(id,examen));
    v(mutex_c);

    -- Califica el examen

    notas[id] = GenerarNota(examen);
    v(alumnos[id]);
  }
}

-- Resolver con MONITORES el siguiente problema. Hay un impresora que debe ser utilizado por N personas de acuerdo al orden de llegada (de a una persona a la vez). Nota: maximizar la concurrencia.

process Persona [id:0..N-1]
{
  Gestor.Llegar();
  Imprimir();
  Gestor.Liberar();
}

Monitor Gestor
{
  cond cvPersona; bool libre = true; int esperando = 0;
  procedure Llegar(){
    if (libre) { libre = false; }
    else { esperando++; wait(cv); }
  }

  procedure Liberar(){
    if(esperando > 0) { esperando--; signal(cvPersona); }
    else { libre = true; }
  }
}
